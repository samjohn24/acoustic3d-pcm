
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================
module bf_time_pcm_de3(

		////////// CLOCK //////////
		CLK_OUT,
		EXT_CLK,
		OSC1_50,
		OSC2_50,
		OSC_BA,
		OSC_BB,
		OSC_BC,
		OSC_BD,

		////////// LED //////////
		LEDB,
		LEDG,
		LEDR,

		////////// SEG7 //////////
		HEX0,
		HEX0_DP,
		HEX1,
		HEX1_DP,

		////////// BUTTON //////////
		Button,

		////////// SW (SLIDE SWITCH) //////////
		SW,

		////////// DIP_SW (DIP SWITCH) //////////
		DIP_SW,

		////////// MAX1619 (TEMPERATURE SENSOR) //////////
		TEMP_CLK,
		TEMP_DATA,
		TEMP_INTn,

		////////// USB //////////
		OTG_A,
		OTG_CS_n,
		OTG_D,
		OTG_DC_DACK,
		OTG_DC_DREQ,
		OTG_DC_IRQ,
		OTG_HC_DACK,
		OTG_HC_DREQ,
		OTG_HC_IRQ,
		OTG_OE_n,
		OTG_RESET_n,
		OTG_WE_n,

		////////// SDCARD //////////
		SD_CLK,
		SD_CMD,
		SD_DAT,
		SD_WPn,

		////////// GPIO0 (J13, GPIO 0) //////////
		GPIO0_CLKINn0,
		GPIO0_CLKINp0,
		GPIO0_CLKOUTn0,
		GPIO0_CLKOUTp0,
		GPIO0_D,

		////////// GPIO1 (J14, GPIO 1) //////////
		GPIO1_CLKINn1,
		GPIO1_CLKINp1,
		GPIO1_CLKOUTn1,
		GPIO1_CLKOUTp1,
		GPIO1_D,

		////////// DDR2 (J9, DDR2 SO-DIMM) //////////
		DDR2_A,
		DDR2_BA,
		DDR2_CAS_n,
		DDR2_CKE,
		DDR2_CLK_n,
		DDR2_CLK_p,
		DDR2_CS_n,
		DDR2_DM,
		DDR2_DQ,
		DDR2_DQS_n,
		DDR2_DQS_p,
		DDR2_ODT,
		DDR2_RAS_n,
		DDR2_SA,
		DDR2_SCL,
		DDR2_SDA,
		DDR2_WE_n,

		////////// HSTCC (J5, HSTC-C TOP/J6, HSTC-C BOTTOM) //////////
		HSTCC_CLKIN_2,
		HSTCC_CLKIN_n,
		HSTCC_CLKIN_p,
		HSTCC_CLKOUT_2,
		HSTCC_CLKOUT_n,
		HSTCC_CLKOUT_p,
		HSTCC_RX_n,
		HSTCC_RX_p,
		HSTCC_SCL,
		HSTCC_SDA,
		HSTCC_TX_n,
		HSTCC_TX_p,

		////////// HSTCD (J7, HSTC-D TOP/J8, HSTC-D BOTTOM) //////////
		HSTCD_CLKIN_2,
		HSTCD_CLKIN_n,
		HSTCD_CLKIN_p,
		HSTCD_CLKOUT_2,
		HSTCD_CLKOUT_n,
		HSTCD_CLKOUT_p,
		HSTCD_RX_n,
		HSTCD_RX_p,
		HSTCD_SCL,
		HSTCD_SDA,
		HSTCD_TX_n,
		HSTCD_TX_p,

		////////// REGULATOR //////////
		JVC_CLK,
		JVC_CS,
		JVC_DATAIN,
		JVC_DATAOUT

	);

//=======================================================
//  PARAMETER declarations
//=======================================================

//=======================================================
//  PORT declarations
//=======================================================
////////// CLOCK //////////
output                    		CLK_OUT;
input                     		EXT_CLK;
input                     		OSC1_50;
input                     		OSC2_50;
input                     		OSC_BA;
input                     		OSC_BB;
input                     		OSC_BC;
input                     		OSC_BD;

////////// LED //////////
output    	[7:0]           	LEDB;
output    	[7:0]           	LEDG;
output    	[7:0]           	LEDR;

////////// SEG7 //////////
output    	[6:0]           	HEX0;
output                    		HEX0_DP;
output    	[6:0]           	HEX1;
output                    		HEX1_DP;

////////// BUTTON //////////
input     	[3:0]           	Button;

////////// SW (SLIDE SWITCH) //////////
input     	[3:0]           	SW;

////////// DIP_SW (DIP SWITCH) //////////
input     	[7:0]           	DIP_SW;

////////// MAX1619 (TEMPERATURE SENSOR) //////////
output                    		TEMP_CLK;
inout                     		TEMP_DATA;
input                     		TEMP_INTn;

////////// USB //////////
output    	[17:1]          	OTG_A;
output                    		OTG_CS_n;
inout     	[31:0]          	OTG_D;
output                    		OTG_DC_DACK;
input                     		OTG_DC_DREQ;
input                     		OTG_DC_IRQ;
output                    		OTG_HC_DACK;
input                     		OTG_HC_DREQ;
input                     		OTG_HC_IRQ;
output                    		OTG_OE_n;
output                    		OTG_RESET_n;
output                    		OTG_WE_n;

////////// SDCARD //////////
output                    		SD_CLK;
inout                     		SD_CMD;
inout                     		SD_DAT;
input                     		SD_WPn;

////////// GPIO0 (J13, GPIO 0) //////////
inout                     		GPIO0_CLKINn0;
inout                     		GPIO0_CLKINp0;
inout                     		GPIO0_CLKOUTn0;
inout                     		GPIO0_CLKOUTp0;
inout     	[31:0]          	GPIO0_D;

////////// GPIO1 (J14, GPIO 1) //////////
inout                     		GPIO1_CLKINn1;
inout                     		GPIO1_CLKINp1;
inout                     		GPIO1_CLKOUTn1;
inout                     		GPIO1_CLKOUTp1;
inout     	[31:0]          	GPIO1_D;

////////// DDR2 (J9, DDR2 SO-DIMM) //////////
output    	[15:0]          	DDR2_A;
output    	[2:0]           	DDR2_BA;
output                    		DDR2_CAS_n;
output    	[1:0]           	DDR2_CKE;
inout     	[1:0]           	DDR2_CLK_n;
inout     	[1:0]           	DDR2_CLK_p;
output    	[1:0]           	DDR2_CS_n;
output    	[7:0]           	DDR2_DM;
inout     	[63:0]          	DDR2_DQ;
inout     	[7:0]           	DDR2_DQS_n;
inout     	[7:0]           	DDR2_DQS_p;
output    	[1:0]           	DDR2_ODT;
output                    		DDR2_RAS_n;
output    	[1:0]           	DDR2_SA;
output                    		DDR2_SCL;
inout                     		DDR2_SDA;
output                    		DDR2_WE_n;

////////// HSTCC (J5, HSTC-C TOP/J6, HSTC-C BOTTOM) //////////
inout                     		HSTCC_CLKIN_2;
inout     	[1:0]           	HSTCC_CLKIN_n;
inout     	[1:0]           	HSTCC_CLKIN_p;
inout                     		HSTCC_CLKOUT_2;
inout     	[1:0]           	HSTCC_CLKOUT_n;
inout     	[1:0]           	HSTCC_CLKOUT_p;
inout     	[29:0]          	HSTCC_RX_n;
inout     	[29:0]          	HSTCC_RX_p;
output                    		HSTCC_SCL;
inout                     		HSTCC_SDA;
inout     	[29:0]          	HSTCC_TX_n;
inout     	[29:0]          	HSTCC_TX_p;

////////// HSTCD (J7, HSTC-D TOP/J8, HSTC-D BOTTOM) //////////
inout                     		HSTCD_CLKIN_2;
inout     	[1:0]           	HSTCD_CLKIN_n;
inout     	[1:0]           	HSTCD_CLKIN_p;
inout                     		HSTCD_CLKOUT_2;
inout     	[1:0]           	HSTCD_CLKOUT_n;
inout     	[1:0]           	HSTCD_CLKOUT_p;
inout     	[29:0]          	HSTCD_RX_n;
inout     	[29:0]          	HSTCD_RX_p;
output                    		HSTCD_SCL;
inout                     		HSTCD_SDA;
inout     	[29:0]          	HSTCD_TX_n;
inout     	[29:0]          	HSTCD_TX_p;

////////// REGULATOR //////////
output                    		JVC_CLK;
output                    		JVC_CS;
input                     		JVC_DATAIN;
output                    		JVC_DATAOUT;


//=======================================================
//  REG/WIRE declarations
//=======================================================
wire reset_n;
wire main_clk;
wire enable_clk_dec;
wire enable_clk_dec16;
wire clk_dec;
wire clk_dec16;
wire [7:0] pdm_data;
wire pdm_clock;
wire ipt_mic_enable;  
wire ipt_pdm_data_inp;

// ===========================
//  DE3 SPECIFIC ASSIGNMENTS
// ===========================

assign main_clk = OSC1_50;
assign reset_n = Button[0];
assign GPIO0_D[16] = pdm_clock;

assign pdm_data[0] = GPIO0_D[4];
assign pdm_data[1] = GPIO0_D[6];
assign pdm_data[2] = GPIO0_D[8];
assign pdm_data[3] = GPIO0_D[10];
assign pdm_data[4] = GPIO0_D[12];
assign pdm_data[5] = GPIO0_D[14];
assign pdm_data[6] = GPIO0_D[20];
assign pdm_data[7] = GPIO0_D[22];

//=======================================================
//  IO Group Voltage Configuration (Do not modify it)
//=======================================================
IOV_A3V3_B1V8_C3V3_D3V3 IOV_Instance(
	.iCLK(OSC2_50),
	.iRST_n(1'b1),
	.iENABLE(1'b0),
	.oREADY(),
	.oERR(),
	.oERRCODE(),
	.oJVC_CLK(JVC_CLK),
	.oJVC_CS(JVC_CS),
	.oJVC_DATAOUT(JVC_DATAOUT),
	.iJVC_DATAIN(JVC_DATAIN)
);

// =============
//   System 
// =============
bf_time_pcm bf_time_pcm (
  .clk_clk                            (main_clk),         
  .reset_reset_n                      (reset_n),          
  .mic_if_pdm_if_data                 (pdm_data),         
  .mic_if_pdm_if_clk_ff               (pdm_clock),        
  .mic_if_avalon_st_fil_error         (),                 
  .mic_if_avalon_st_fil_data          (),                 
  .mic_if_avalon_st_fil_valid         (),                 
  .mic_if_avalon_st_fil_startofpacket (),                 
  .mic_if_avalon_st_fil_endofpacket   (),                 
  .mic_if_avalon_st_fil_ready         (1'b1),             
  .mic_if_avalon_st_pdm_error         (),                 
  .mic_if_avalon_st_pdm_data          (),                 
  .mic_if_avalon_st_pdm_valid         (),                 
  .mic_if_avalon_st_pdm_endofpacket   (),                 
  .mic_if_avalon_st_pdm_startofpacket (),                 
  .mic_if_avalon_st_pdm_ready         (1'b1),             
  .mic_if_test_pdm_data_inp           (ipt_pdm_data_inp), 
  .mic_if_test_mic_enable             (ipt_mic_enable),   
  .mic_if_system_clk_dec              (clk_dec),          
  .mic_if_system_clk_dec16            (clk_dec16),        
  .mic_if_system_enable_clk_dec       (enable_clk_dec),   
  .mic_if_system_enable_clk_dec16     (enable_clk_dec16)  
);

// ================
//   CLOCK GATING
// ================
ALTCLKCTRL clk_gate_dec (
  .inclk  (main_clk),         
  .ena    (enable_clk_dec),   
  .outclk (clk_dec)           
);

ALTCLKCTRL clk_gate_dec16 (
  .inclk  (main_clk),         
  .ena    (enable_clk_dec16), 
  .outclk (clk_dec16)         
);

// ================
//   TEST OUTPUTS
// ================
assign LEDR[7] = ipt_mic_enable;
assign LEDR[6] = ipt_pdm_data_inp;

endmodule
